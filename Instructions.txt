# Iniciando um projeto React com Vite

O Vite é uma ferramenta de build moderna e rápida que pode ser usada para criar projetos React. Aqui está um guia passo a passo para começar:

## Pré-requisitos
- Node.js instalado (versão 14.18+ ou 16+)
- NPM ou Yarn instalado

## Passos para criar um novo projeto

1. Abra o terminal e execute o comando:
```bash
npm create vite@latest meu-projeto -- --template react
```

2. Navegue até a pasta do projeto:
```bash
cd meu-projeto
```

3. Instale as dependências:
```bash
npm install
```

4. Inicie o servidor de desenvolvimento:
```bash
npm run dev
```

## Estrutura do Projeto
Após a criação, você terá uma estrutura básica de arquivos:
- `src/` - Diretório principal do código fonte
  - `main.jsx` - Ponto de entrada da aplicação
  - `App.jsx` - Componente principal
  - `assets/` - Arquivos estáticos (imagens, fontes, etc.)
- `public/` - Arquivos públicos
- `index.html` - Template HTML principal
- `package.json` - Configurações e dependências do projeto
- `vite.config.js` - Configurações do Vite

## Comandos Úteis
- `npm run dev` - Inicia o servidor de desenvolvimento
- `npm run build` - Cria a versão de produção
- `npm run preview` - Visualiza a versão de produção localmente

## Dicas
- O Vite oferece Hot Module Replacement (HMR) por padrão
- A configuração padrão é otimizada para desenvolvimento
- Você pode personalizar as configurações no arquivo `vite.config.js`

## Configurando Tailwind CSS

1. Instale o Tailwind CSS e suas dependências:
```bash
npm install -D tailwindcss postcss autoprefixer
```

2. Gere os arquivos de configuração do Tailwind:
```bash
npx tailwindcss init -p
```

3. Configure os caminhos dos templates no arquivo `tailwind.config.js`:
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

4. Adicione as diretivas do Tailwind ao seu arquivo CSS principal (`src/index.css`):
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

5. Agora você pode começar a usar as classes do Tailwind em seus componentes React. Exemplo:
```jsx
function App() {
  return (
    <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-xl sm:mx-auto">
        <div className="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
          <h1 className="text-3xl font-bold text-gray-900">
            Meu Projeto React com Tailwind
          </h1>
        </div>
      </div>
    </div>
  )
}
```

## Dicas para Tailwind CSS
- Use a extensão do VS Code "Tailwind CSS IntelliSense" para autocompletar classes
- Consulte a documentação oficial do Tailwind para ver todas as classes disponíveis
- Você pode criar suas próprias classes utilitárias usando a diretiva @apply
- Para desenvolvimento mais rápido, considere usar componentes pré-construídos do Tailwind UI



6. Componente para tailwin-scrollbar:
>> npm install tailwind-scrollbar
## Adicionar no tailwind.config.js
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  plugins: [require('tailwind-scrollbar')],
}

7. Biblioteca de ícones
>> npm install lucide-react

8. Biblioteca para notificações